package cn.zhuchuangsoft.footstone.controller;

import cn.zhuchuangsoft.footstone.controller.ex.ControlUnsuccessfulException;
import cn.zhuchuangsoft.footstone.controller.ex.ModificationNameException;
import cn.zhuchuangsoft.footstone.entity.Device;
import cn.zhuchuangsoft.footstone.entity.DeviceLine;
import cn.zhuchuangsoft.footstone.entity.Lines;
import cn.zhuchuangsoft.footstone.entity.Message;
import cn.zhuchuangsoft.footstone.service.IDeviceService;
import cn.zhuchuangsoft.footstone.utils.JsonResult;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.StringEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


@RestController
@RequestMapping("device")
public class DeviceController extends BaseController {

    @Autowired
    private IDeviceService deviceService;



    /**
     * 第三方获取设备列表
     * TODO 并写入数据库
     * @return
     */
    //@Secured("ROLE_ADMIN")
    @GetMapping("get-device-all")
    @ApiOperation(value = "获取设备列表")
    public JsonResult<List<Device>> getDevice(){
        String authorization = getAuthorization(null);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+ID;
        try {
            HttpRequestBase httpRequestBase = getRequestByUrl(url,authorization,1);
            String json = getJson(httpRequestBase);
            JSONObject jsonObject = JSON.parseObject(json);
            JSONArray data = jsonObject.getJSONArray("Data");
            List<Device> datas = new ArrayList<>();
            Integer count = data.size();
            for(int i=0;i<count;i++){
                JSONObject js = data.getJSONObject(i);
                Device device = new Device(js);
                datas.add(device);
            }
            return new JsonResult<List<Device>>(SUCCESS,count,datas);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("get-device/{SN}")
    @ApiOperation("使用SN码获取单个设备信息")
    public JsonResult<Device> getDeviceBySN(@ApiParam("SN码")@PathVariable("SN") String sn){
        List<String> parameter = new ArrayList<String>();
        parameter.add("SN="+sn);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+sn;
        try{
            HttpRequestBase httpRequestBase = getRequestByUrl(url,authorization,1);
            String json = getJson(httpRequestBase);
            JSONObject jsonObject = JSON.parseObject(json);
            JSONObject data = jsonObject.getJSONObject("Data");
            Device device = new Device(data);
            return new JsonResult<Device>(SUCCESS,device);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("get/{DeviceID}/lines/{LineID}")
    @ApiOperation("获取单个线路详情")
    public JsonResult<DeviceLine> getLine(@ApiParam("设备ID")@PathVariable("DeviceID") String deviceId,@ApiParam("线路ID")@PathVariable("LineID")String lineId){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/threephase";
        try{
            HttpRequestBase httpRequestBase = getRequestByUrl(url,authorization,1);
            String json = getJson(httpRequestBase);
            JSONObject jsonObject = JSON.parseObject(json);
            JSONObject data = jsonObject.getJSONObject("Data");
            DeviceLine deviceLine = new DeviceLine(data);
            return new JsonResult<DeviceLine>(SUCCESS,deviceLine);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set-switch")
    @ApiOperation("控制产品开关")
    public JsonResult<Void> setSwitch(@ApiParam("控制器ID") String controllerId,@ApiParam("线路编号") Integer lineNo,@ApiParam("0:关闭 1:开启") Integer status){
        System.out.println(controllerId+"-"+lineNo+"-"+status);
        List<String> parameter = new ArrayList<String>();
        parameter.add("ControllerID="+controllerId);
        Lines lines = new Lines(lineNo,status);
        List<Lines> lineList = new ArrayList<>();
        lineList.add(lines);
        parameter.add("Lines="+JSONArray.toJSONString(lineList));
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/status/"+controllerId;
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("ControllerID",controllerId);
            JSONObject bodyJson2 = new JSONObject(true);
            bodyJson2.put("LineNo",lineNo);
            bodyJson2.put("Status",status);
            JSONArray jsonArray = new JSONArray();
            jsonArray.add(bodyJson2);
            bodyJson.put("Lines",jsonArray);
            put.setEntity(new StringEntity(bodyJson.toJSONString()));
            String json = getJson(put);
            JSONObject jsonObject = JSON.parseObject(json);
            Integer code = jsonObject.getInteger("Code");
            if(code!=1){
                throw new ControlUnsuccessfulException("控制失败");
            }
            return new JsonResult<Void>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<Void>(FAILED);
    }

    @GetMapping("set/device/name")
    @ApiOperation("设置设备名称")
    public JsonResult<Void> setDeviceName(String deviceId,String name){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("Name="+name);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/name";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("Name",name);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("修改设备名称失败 ");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @ApiOperation("获取设备警告信息")
    @GetMapping("get-warning")
    public JsonResult<List<Message>> getWarning(String controllerId, Integer page){
        List<String> parameter = new ArrayList<String>();
        parameter.add("ControllerID="+controllerId);
        parameter.add("Page="+page);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/messages/"+controllerId+"/"+page;
        try{
            HttpRequestBase httpRequestBase = getRequestByUrl(url,authorization,1);
            String json = getJson(httpRequestBase);
            JSONObject jsonObject = JSON.parseObject(json);
            JSONArray data = jsonObject.getJSONArray("Data");
            List<Message> list = new ArrayList<Message>();

            for (int i=0;i<data.size();i++){
                Message message = new Message(data.getJSONObject(i));
                list.add(message);
            }
            return new JsonResult<>(SUCCESS,list);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/lines/name")
    @ApiOperation("修改线路名称")
    public JsonResult<Void> setLineName(String deviceId,String lineId,String name){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("Name="+name);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/name";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("Name",name);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("修改线路名称失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/line/max-current")
    @ApiOperation("设置最大电流")
    public JsonResult<Void> setMaxCurrent(String deviceId,String lineId,@ApiParam("最大电流,大于1小于63") int max,@ApiParam("持续多久后断开") int duration){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("Max="+max);
        parameter.add("Duration="+duration);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/max";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("Max",max);
            bodyJson.put("Duration",duration);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("修改最大电流失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/line/voltage")
    @ApiOperation("设置过压和欠压值")
    public JsonResult<Void> setVoltage(String deviceId,String lineId,@ApiParam("欠压值 范围175-205") Integer under,@ApiParam("过压值 范围235-265") Integer over){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("Under="+under);
        parameter.add("Over="+over);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/under";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("Under",under);
            bodyJson.put("Over",over);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("修改电压值失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/line/enabled")
    @ApiOperation("锁定手动")
    public JsonResult<Void> setEnabled(String deviceId,String lineId,@ApiParam("锁定手动是否开启 0:关闭 1:开启") Integer enabled){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("Enabled="+enabled);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/enabled";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("Enabled",enabled);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("设置手动开关失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/line/leak")
    @ApiOperation("设置漏电预警值")
    public JsonResult<Void> setLeak(String deviceId,String lineId,@ApiParam("漏电预警值 单位mA") Integer leakValue){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("LeakValue="+leakValue);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/leak";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("LeakValue",leakValue);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("设置漏电预警值失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }

    @GetMapping("set/line/err-leak")
    @ApiOperation("设置漏电动作值")
    public JsonResult<Void> setErrLeak(String deviceId,String lineId,@ApiParam("漏电动作值 单位mA") Integer errLeakValue){
        List<String> parameter = new ArrayList<String>();
        parameter.add("DeviceID="+deviceId);
        parameter.add("LineID="+lineId);
        parameter.add("Err_LeakValue="+errLeakValue);
        String authorization = getAuthorization(parameter);
        String url = "http://ex-api.jalasmart.com/api/v2/devices/"+deviceId+"/lines/"+lineId+"/err_leak";
        try{
            HttpPut put = (HttpPut) getRequestByUrl(url,authorization,3);
            JSONObject bodyJson = new JSONObject(true);
            bodyJson.put("DeviceID",deviceId);
            bodyJson.put("LineID",lineId);
            bodyJson.put("Err_LeakValue",errLeakValue);
            put.setEntity(new StringEntity(bodyJson.toJSONString(),"UTF-8"));
            JSONObject jsonObject = JSON.parseObject(getJson(put));
            if(jsonObject.getInteger("Code")!=1){
                throw new ModificationNameException("设置漏电动作值失败");
            }
            return new JsonResult<>(SUCCESS);
        }catch (IOException e){
            e.printStackTrace();
        }
        return new JsonResult<>(FAILED);
    }





}
